#include<stdio.h> 
#define NODE 4 
int graph[NODE][NODE]; 
int path[NODE]; 
void displayCycle() {     
   printf("The Hamilton Cycle : \n"); 
   for (int i = 0; i < NODE; i++) 
      printf("%d  ", path[i]); 
   printf("%d\n", path[0]);       
} 
int isValid(int v, int k) { 
   if (graph [path[k-1]][v] == 0)    
      return 0; 
   for (int i = 0; i < k; i++)    
      if (path[i] == v) 
         return 0; 
   return 1; 
} 
int cycleFound(int k) { 
   if (k == NODE) {              
      if (graph[path[k-1]][ path[0] ] == 1 ) 
         return 1; 
      else 
         return 0; 
   } 
   for (int v = 1; v < NODE; v++) {        
      if (isValid(v,k)) {                 
         path[k] = v; 
         if (cycleFound (k+1) == 1) 
            return 1; 
         path[k] = -1;                
      } 
   } 
   return 0; 
} 
int hamiltonianCycle() { 
   for (int i = 0; i < NODE; i++) 
      path[i] = -1; 
   path[0] = 0;      
   if ( cycleFound(1) == 0 ) { 
      printf("Solution does not exist\n"); 
      return 0; 
   } 
   displayCycle(); 
   return 1; 
} 
int main() { 
 int i,j; 
 printf("Enter the Graph : \n"); 
 for (i=0;i<NODE;i++){ 
  for (j=0;j<NODE;j++){ 
   printf("Graph G(%d,%d) = ", (i+1), (j+1)); 
   scanf("%d", &graph[i][j]); 
  } 
 } 
 printf("\n"); 
printf("The Graph :\n"); 
for (i=0;i<NODE;i++){ 
for (j=0;j<NODE;j++){ 
printf("%d\t", graph [i][j]); 
} 
printf("\n"); 
} 
printf("\n"); 
hamiltonianCycle(); 
} 
